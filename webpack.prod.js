/* Extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. */
const MiniCSSExtractPlugin = require('mini-css-extract-plugin')
const TerserPlugin = require('terser-webpack-plugin')
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')

/* Allows creation of a webpack file that's generic across all configs, that can
 * be merged with another config. */
const merge = require('webpack-merge')
const common = require('./webpack.common.js')

//const WorkboxPlugin = require('workbox-webpack-plugin')

module.exports = merge(common, {
    mode: 'production',
    devtool: 'source-map',
    /* Allows us to run minimizing actions on certain files. */
    optimization: {
        minimizer: [ new TerserPlugin({}), new OptimizeCSSAssetsPlugin({})]
    },
    module: {
        /* 
         * sass-loader: loads a Sass/SCSS file and compiles it to CSS. 
         * css-loader: collects CSS from all the CSS files referenced in the app
         * (and therefore in the dependency tree) and outputs it as a string.
         * style-loader (dev only): takes the output string generated by the css-loader
         * and places it inside the <style> tags in the index.html file (inline styles).
         *
         * Styles are not minified by default in production mode. The webpack dev server
         * takes our styles and puts them into main.js, and then adds them into our HTML
         * via inline styles (which are slow). To be more efficient, we need to take our
         * styles and move them into a CSS file that can be minified.
         * 
         * The MiniCSSExtractPlugin plugin/loader is used to extract our CSS into its own
         * file that will be added to the distribution folder.
         */
        rules: [
            {
                test: /\.scss$/,
                use: [ MiniCSSExtractPlugin.loader, 'css-loader', 'sass-loader' ]
            }
        ]
    },
    plugins: [
        new MiniCSSExtractPlugin({ filename: '[name].css' }),
        /* new WorkboxPlugin.GenerateSW() */
    ]
})